I was trying to fix these bugs:

   svn --version  # ok
   s4  --version  # fails %Error: Invalid global option: --version
   svn -m message commit   # ok
   s4  -m message commit   # fails %Error: Invalid global option: -m

So I started hacking and hacking, but ran into trouble.
Problems:
- how to strip out the s4-specific options and leave the others for svn
- to support "-m message" before the command, you must abandon the
  concept that you know what subcommand it is while parsing options.
  The svn guys must have a list of all arguments and whether they take
  a parameter or not.  They parse params (and sometimes the arg after it)
  in order, and the first thing that is not a param must be the svn command.
  I think that is consistent with this

	denney@srv079:~/src/perltools/SVN-S4/test_dir/trunk> svn ls --quiet
	Subcommand 'list' doesn't accept option '-q [--quiet]'
	Type 'svn help list' for usage.
	denney@srv079:~/src/perltools/SVN-S4/test_dir/trunk> svn ls --quietjwef
	svn: invalid option: --quietjwef
	Type 'svn help' for usage.

   svn ls does not allow --quiet, but some other commands do.
   so there's a different message for "svn ls --quiet" than for
   --quietjwef that is not recognized by any command.


Anyway, I'm abandoning this for now.



Index: s4
===================================================================
--- s4	(revision 26892)
+++ s4	(working copy)
@@ -41,38 +41,40 @@
 autoflush STDERR 1;
 
 $Debug = 0;
+our @Opt_NonS4Param = ();
 our $Opt_Cmd;
-our @Opt_CmdParams = ();
 our $Opt_SvnBinary;
 
+# scan through all arguments up to --, and remove the ones that S4 recognizes.
 our $SvnOpt = new SVN::S4::Getopt;
-@ARGV = $SvnOpt->parameter(@ARGV);
 Getopt::Long::config ("pass_through", "no_auto_abbrev");
-
 if (! GetOptions (
-		  "help"	=> \&usage,
-		  "debug"	=> \&debug,
-		  "svn=s"	=> \$Opt_SvnBinary,
-		  "<>"		=> \&parameter,
-		  )) {
+                 "help"        => \&usage,
+                 "debug"       => \&debug,
+                 "svn=s"       => \$Opt_SvnBinary,
+                 "<>"          => \&parameter,
+                 )) {
     die "%Error: Type 's4 help' for usage.\n";
 }
 
-if (!defined $Opt_Cmd) {
-    die "%Error: Type 's4 help' for usage.\n";
-}
+# use our Getopt module that understands how to parse subversion commands
+$SvnOpt->svn_command ($Opt_Cmd);
+our %opts = $SvnOpt->hashCmd(@Opt_NonS4Param);
+print "right after hashCmd, opts = ", Dumper(\%opts), "\n" if $Debug;
+print "right after hashCmd, Opt_Cmd = ", Dumper($Opt_Cmd), "\n" if $Debug;
+!$opts{unknown} or die "%Error: Unknown argument: $opts{unknown}[0]\n";
 
-print "Cmd: ",join(' ',$Opt_Cmd),"\n" if $Debug;
-print "  Pos: ",join(' ',@Opt_CmdParams),"\n" if $Debug;
+#print "after stripping s4 options: ", Dumper(\%opts), "\n" if $Debug;
 
 # Create one SVN::S4 object
-our %opts = $SvnOpt->hashCmd($Opt_Cmd, @Opt_CmdParams);
 our $s4 = new SVN::S4(SVN::S4::args_to_params(%opts));	# Process --quiet etc
 $s4->{svn_binary} = $Opt_SvnBinary || $ENV{'S4_SVN'} || "svn";
 print "Using '$s4->{svn_binary}' for subversion commands\n" if $Debug;
 
 # Execute comand
-if ($Opt_Cmd eq "help-summary") {
+if (!$Opt_Cmd) {
+    cmd_svn();
+} elsif ($Opt_Cmd eq "help-summary") {
     print "All commands:\n";
     cmd_help_summary();
 } elsif ($Opt_Cmd eq "help") {
@@ -105,20 +107,17 @@
 sub parameter {
     my $param = shift;
     if ($param =~ /^-/) {
-	if (!defined $Opt_Cmd) {
-	    die "$0: %Error: Invalid global option: $param\n";
-	} else {
-	    push @Opt_CmdParams, $param;
-	}
+       push @Opt_NonS4Param, $param;
     } else {
-	if (!defined $Opt_Cmd) {
-	    $Opt_Cmd = $SvnOpt->dealias($param);
-	} else {
-	    push @Opt_CmdParams, $param;
-	}
+       if (!defined $Opt_Cmd) {
+           $Opt_Cmd = $SvnOpt->dealias($param);
+       } else {
+           push @Opt_NonS4Param, $param;
+       }
     }
 }
 
+
 #######################################################################
 #######################################################################
 #######################################################################
@@ -126,21 +125,23 @@
 
 sub cmd_svn {
     # Call s4 using all the default parameters from the command line
-    my @cmd = ($s4->{svn_binary});
-    push @cmd, $SvnOpt->get_parameters;
-    push @cmd, $Opt_Cmd;
-    push @cmd, @Opt_CmdParams;
+    # rebuild args list because some opts have been sucked out by s4.
+    my @args = ($s4->{svn_binary}, $Opt_Cmd, @Opt_NonS4Param);
+    print "cmd_svn with cmd=", Dumper($Opt_Cmd), " and params=", Dumper(\@Opt_NonS4Param), "\n" if $Debug;
+    #push @cmd, $SvnOpt->get_parameters;
+    #push @cmd, $Opt_Cmd if $Opt_Cmd;
+    #push @cmd, @Opt_CmdParams;
 
     # Run
-    print "\t",join(' ',@cmd),"\n" if $Debug;
+    print "\t",join(' ',@args),"\n" if $Debug;
     local $! = undef;
-    $s4->run(@cmd);
+    $s4->run(@args);
 }
 
 sub cmd_add {
-    print "cmd_add ",join(' ',@Opt_CmdParams),"\n"  if $Debug;
+    print "cmd_add ",join(' ',@Opt_NonS4Param),"\n"  if $Debug;
     #Ignore: !$opts{unknown} or die "%Error: s4 add: Unknown argument: $opts{unknown}[0]\n";
-    @Opt_CmdParams = $SvnOpt->stripOneArg('--raw',@Opt_CmdParams);
+    @Opt_NonS4Param = $SvnOpt->stripOneArg('--raw',@Opt_NonS4Param);
 
     cmd_svn();  # Do the normal add
 
@@ -154,7 +155,7 @@
 }
 
 sub cmd_fixprop {
-    print "cmd_fixprop ",join(' ',@Opt_CmdParams),"\n"  if $Debug;
+    print "cmd_fixprop ",join(' ',@Opt_NonS4Param),"\n"  if $Debug;
     !$opts{unknown} or die "%Error: s4 fixprop: Unknown argument: $opts{unknown}[0]\n";
 
     $opts{path} or die "%Error: s4 fixprop: File path is required\n";
@@ -168,7 +169,7 @@
 
 sub cmd_update {
     # Call s4 using all the default parameters from the command line
-    print "cmd_update ",join(' ',@Opt_CmdParams),"\n"  if $Debug;
+    print "cmd_update ",join(' ',@Opt_NonS4Param),"\n"  if $Debug;
     !$opts{unknown} or die "%Error: s4 update: Unknown argument: $opts{unknown}[0]\n";
     # If no paths specified, update the current directory.
     my @paths;
@@ -177,13 +178,17 @@
     # Decide, once and for all, what revision number to update to.
     # This is important so that we end up with a coherent version, even
     # if someone is checking it at the same time.
-    my $rev = $s4->which_rev (revision=>$opts{revision}[0], path=>$paths[0]);
+    my $rev;
+    $rev = $opts{revision}[0] if defined $opts{revision};
+    print "before which_rev with opts = ", Dumper(\%opts), "\n" if $Debug;
+    $rev = $s4->which_rev (revision=>$rev, path=>$paths[0]);
+    print "after which_rev with opts = ", Dumper(\%opts), "\n" if $Debug;
     $s4->update (revision => $rev, paths => \@paths);
 }
 
 sub cmd_checkout {
     # Call s4 using all the default parameters from the command line
-    print "cmd_checkout ",join(' ',@Opt_CmdParams),"\n"  if $Debug;
+    print "cmd_checkout ",join(' ',@Opt_NonS4Param),"\n"  if $Debug;
     !$opts{unknown} or die "%Error: s4 checkout: Unknown argument: $opts{unknown}[0]\n";
     # The documentation for svn checkout says "checkout URL... [PATH]".
     # I'm only going to support one URL here, e.g. "checkout URL [PATH]".
Index: lib/SVN/S4/Getopt.pm
===================================================================
--- lib/SVN/S4/Getopt.pm	(revision 26892)
+++ lib/SVN/S4/Getopt.pm	(working copy)
@@ -21,6 +21,7 @@
 use Carp;
 use IO::File;
 use Cwd;
+use Data::Dumper;
 
 ######################################################################
 #### Configuration Section
@@ -59,6 +60,11 @@
      'up'	=> 'update',
      );
 
+# Global arguments for all commands
+our $_GlobalArgs = ' [--debug]'
+                 . ' [--version]'
+                 ;
+
 # List of commands and arguments.
 # Forms:
 #    [-switch]
@@ -476,6 +482,7 @@
     my $defaults = {pwd=>Cwd::getcwd(),
 		    editor=>($ENV{SVN_EDITOR}||$ENV{VISUAL}||$ENV{EDITOR}||'emacs'),
 		    ssh=>($ENV{SVN_SSH}),
+		    svn_command=>undef,  # after parsing, the svn subcommand goes here
 		    # Ours
 		    fileline=>'Command_Line:0',
 		};
@@ -490,22 +497,29 @@
 #######################################################################
 # Option parsing
 
-sub parameter {
+sub svn_command {
     my $self = shift;
-    # Parse a parameter. Return list of leftover parameters
-
-    my @new_params = ();
-    foreach my $param (@_) {
-	print " parameter($param)\n" if $Debug;
-	$self->{_parameter_unknown} = 1;  # No global parameters
-	if ($self->{_parameter_unknown}) {
-	    push @new_params, $param;
-	    next;
-	}
-    }
-    return @new_params;
+    my $value = shift;
+    $self->{svn_command} = $value if $value;
+    return $self->{svn_command};  # else treat it as a query
 }
 
+#sub parameter {
+#    my $self = shift;
+#    # Parse a parameter. Return list of leftover parameters
+#
+#    my @new_params = ();
+#    foreach my $param (@_) {
+#	print " parameter($param)\n" if $Debug;
+#	$self->{_parameter_unknown} = 1;  # No global parameters
+#	if ($self->{_parameter_unknown}) {
+#	    push @new_params, $param;
+#	    next;
+#	}
+#    }
+#    return @new_params;
+#}
+
 #######################################################################
 # Accessors
 
@@ -516,7 +530,9 @@
 sub command_arg_text {
     my $self = shift;
     my $cmd = shift;
-    return ($_Args{$cmd}{args});
+    my $argtext = $_GlobalArgs;
+    $argtext .= $_Args{$cmd}{args} if $cmd && $_Args{$cmd}{args};
+    return $argtext;
 }
 
 sub command_s4_addition {
@@ -569,26 +585,26 @@
 
 sub parseCmd {
     my $self = shift;
-    my $cmd = shift;
     my @args = @_;
 
-    $cmd = $self->dealias($cmd);
-
     # Returns an array elements for each parameter.
     #    It's what the given argument is
     #		Switch, The name of the switch, or unknown
-    my $cmdTemplate = $_Args{$cmd}{args};
+    my $cmd = $self->svn_command;
+    my $cmdTemplate = $self->command_arg_text($cmd);
     print "parseCmd($cmd @args) -> $cmdTemplate\n" if $Debug;
     my %parser;  # Hash of switch and if it gets a parameter
     my $paramNum=0;
     my $tempElement = $cmdTemplate;
     while ($tempElement) {
 	$tempElement =~ s/^\s+//;
+	print "tempElement=$tempElement\n" if $Debug;
 	if ($tempElement =~ s/^\[(-\S+)\]//) {
 	    my $switches = $1;
 	    my $name = $1 if $switches =~ /(--[---a-zA-Z0-9_]+)/;
 	    foreach my $sw (split /[|]/, $switches) {
 		$parser{$sw} = {what=>$name, then=>undef, more=>0,};
+		print "case1. parser{$sw} = ", Dumper($parser{$sw}), "\n" if $Debug;
 	    }
 	} elsif ($tempElement =~ s/^\[(-\S+)\s+(\S+)\]//) {
 	    my $switches = $1;  my $then=$2;
@@ -596,24 +612,29 @@
 	    $then = lc $name; $then =~ s/^-+//;  $then =~ s/[^a-z0-9]+/_/g;
 	    foreach my $sw (split /[|]/, $switches) {
 		$parser{$sw} = {what=>$name, then=>$then, more=>0,};
+		print "case2. parser{$sw} = ", Dumper($parser{$sw}), "\n" if $Debug;
 	    }
 	} elsif ($tempElement =~ s/^\[(\S+)\.\.\.\]//) {
 	    $parser{$paramNum} = {what=>lc $1, then=>undef, more=>1,};
+		print "case3. parser{$paramNum} = ", Dumper($parser{$paramNum}), "\n" if $Debug;
 	    $paramNum++;
 	} elsif ($tempElement =~ s/^\[(\S+)\]//) {
 	    $parser{$paramNum} = {what=>lc $1, then=>undef, more=>0,};
+	    print "case4. parser{$paramNum} = ", Dumper($parser{$paramNum}), "\n" if $Debug;
 	    $paramNum++;
 	} elsif ($tempElement =~ s/^(\S+)\.\.\.//) {
 	    $parser{$paramNum} = {what=>lc $1, then=>undef, more=>1,};
+	    print "case5. parser{$paramNum} = ", Dumper($parser{$paramNum}), "\n" if $Debug;
 	    $paramNum++;
 	} elsif ($tempElement =~ s/^(\S+)//) {
 	    $parser{$paramNum} = {what=>lc $1, then=>undef, more=>0,};
+	    print "case6. parser{$paramNum} = ", Dumper($parser{$paramNum}), "\n" if $Debug;
 	    $paramNum++;
 	} else {
 	    die "Internal %Error: Bad Cmd Template $cmd/$paramNum: $cmdTemplate,";
 	}
     }
-    #use Data::Dumper; print "parseCmd: ",Dumper(\%parser) if $Debug||1;
+    print "parseCmd: ",Dumper(\%parser) if $Debug;
 
     my @out;
     my $inSwitch;
@@ -622,6 +643,7 @@
     # if any single-dash args like "-r2000", expand them into "-r" and "2000"
     # before parsing.
     @args = $self->expand_single_dash_args (@args);
+    print "parseCmd: after expanding single-dash, args = ", ,Dumper(\@args) if $Debug;
     foreach my $arg (@args) {
 	if ($inFlags && $arg =~ /^-/) {
 	    if ($arg eq "--") {
@@ -663,12 +685,13 @@
 
 sub hashCmd {
     my $self = shift;
-    my $cmd = shift;
     my @args = @_;
 
+    $Debug=1;   # have to enable this by hand, since opts not parsed yet
+
     my %hashed;
-    my @cmdParsed = $self->parseCmd($cmd, @args);
-    #use Data::Dumper; print "hashCmd: ",Dumper(\@args, \@cmdParsed);
+    my @cmdParsed = $self->parseCmd(@args);
+    #print "hashCmd: ",Dumper(\@args, \@cmdParsed);
     for (my $i=0; $i<=$#cmdParsed; $i++) {
 	die if !defined $cmdParsed[$i];
 	if ($cmdParsed[$i] =~ /^(-.*)$/) {
